/*
 * AccessSetup.java
 *
 * Created on 13 Июль 2008 г., 14:16
 */
package tradeterminal.users.accesssetup;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import minersinstrument.ui.IADialogPanel;
import tradeterminal.conf.AppAccess;
import tradeterminal.conf.AppAccessSettings;

/**
 *
 * @author  PKopychenko
 */
public class AccessSetup extends javax.swing.JPanel implements IADialogPanel {

    private List<InstallData> list;
    private int userId = -1;

    /** Creates new form AccessSetup */
    public AccessSetup(int userId) {
        this.userId = userId;

        initComponents();


        jScrollPane1.getVerticalScrollBar().setPreferredSize(new Dimension(32, 32));
        jScrollPane1.getHorizontalScrollBar().setPreferredSize(new Dimension(32, 32));


        list = new ArrayList<InstallData>();

        for (AppAccess aa : AppAccessSettings.getAccessMap().values()) {
            list.add(new InstallData(aa.getKod(), aa.getDescription(), aa.isHasAccess(userId)));
        }

        accessList.setListData(list.toArray());

        CheckListCellRenderer renderer = new CheckListCellRenderer();
        accessList.setCellRenderer(renderer);
        accessList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        CheckListener lst = new CheckListener(this);
        accessList.addMouseListener(lst);
        accessList.addKeyListener(lst);
    }

    public JList getAccessList() {
        return accessList;
    }

    @Override
    public boolean checkPanel() {

        for (InstallData id : list) {
            AppAccessSettings.getAccessMap().get(id.kod).setAccess(userId, id.isSelected());
        }

        return true;
    }

    @Override
    public void openPanel() {
        accessList.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        accessList = new javax.swing.JList();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        accessList.setName("accessList"); // NOI18N
        jScrollPane1.setViewportView(accessList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE).addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE).addContainerGap()));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList accessList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

class CheckListCellRenderer
        extends JCheckBox
        implements ListCellRenderer {

    protected static Border m_noFocusBorder =
            new EmptyBorder(1, 1, 1, 1);

    public CheckListCellRenderer() {
        super();
        setOpaque(true);
        setBorder(m_noFocusBorder);
    }

    @Override
    public Component getListCellRendererComponent(JList list,
            Object value, int index, boolean isSelected, boolean cellHasFocus) {
        setText(value.toString());

        setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
        setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());

        InstallData data = (InstallData) value;
        setSelected(data.isSelected());

        setFont(list.getFont());
        setBorder((cellHasFocus) ? UIManager.getBorder("List.focusCellHighlightBorder")
                : m_noFocusBorder);

        return this;
    }
}

class CheckListener
        implements MouseListener, KeyListener {

    protected AccessSetup m_parent;
    protected JList m_list;

    public CheckListener(AccessSetup parent) {
        m_parent = parent;
        m_list = parent.getAccessList();
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getX() < 20) {
            doCheck();
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyChar() == ' ') {
            doCheck();
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    protected void doCheck() {
        int index = m_list.getSelectedIndex();
        if (index < 0) {
            return;
        }
        InstallData data = (InstallData) m_list.getModel().
                getElementAt(index);
        data.invertSelected();
        m_list.repaint();
    }
}

class InstallData {

    protected String m_name;
    protected String kod;
    protected boolean m_selected;

    public InstallData(String kod, String name, boolean m_selected) {
        this.kod = kod;
        this.m_name = name;
        this.m_selected = m_selected;
    }

    public String getName() {
        return m_name;
    }

    public void setSelected(boolean selected) {
        m_selected = selected;
    }

    public void invertSelected() {
        m_selected = !m_selected;
    }

    public boolean isSelected() {
        return m_selected;
    }

    public String getKod() {
        return kod;
    }

    @Override
    public String toString() {
        return m_name;
    }
}
