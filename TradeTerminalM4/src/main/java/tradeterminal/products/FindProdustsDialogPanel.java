/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FindProdustsDialogPanel.java
 *
 * Created on 09.07.2012, 15:05:07
 */
package tradeterminal.products;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import minersinstrument.ui.ANumbericCellRenderer;
import minersinstrument.ui.IADialogPanel;
import org.jdesktop.application.Action;
import tradeterminal.Setup;

/**
 *
 * @author dev_tt
 */
public class FindProdustsDialogPanel extends javax.swing.JPanel implements IADialogPanel {

    DefaultTableModel adapter = new DefaultTableModel();
    //private int selectedRowId = -1;
    private String selectedScode;

    /** Creates new form FindProdustsDialogPanel */
    public FindProdustsDialogPanel() {
        initComponents();

        productsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        productsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        productsTable.setShowGrid(true);

        findTextField.requestFocus();
    }

    private void update() {


        productsTable.setModel(adapter);

        productsTable.getColumnModel().removeColumn(productsTable.getColumnModel().getColumn(0));
        productsTable.getColumnModel().removeColumn(productsTable.getColumnModel().getColumn(4));

        productsTable.getColumnModel().getColumn(0).setMinWidth(200);
        productsTable.getColumnModel().getColumn(0).setHeaderValue("Наименование");
        productsTable.getColumnModel().getColumn(1).setHeaderValue("Описание");
        productsTable.getColumnModel().getColumn(1).setMinWidth(200);
        
        productsTable.getColumnModel().getColumn(2).setHeaderValue("Штрихкод");
        productsTable.getColumnModel().getColumn(2).setMinWidth(130);
        
        productsTable.getColumnModel().getColumn(3).setHeaderValue("Количество");
        productsTable.getColumnModel().getColumn(4).setHeaderValue("Мера");
        productsTable.getColumnModel().getColumn(5).setHeaderValue("Цена");
        productsTable.getColumnModel().getColumn(6).setHeaderValue("<html><body>Специальная<br>цена</body></html>");

        productsTable.getColumnModel().getColumn(6).setCellRenderer(
                new ANumbericCellRenderer(new javax.swing.ImageIcon(getClass().getResource("/tradeterminal/icons/TT_icons/16X16/spskidka.png"))));

        productsTable.getColumnModel().getColumn(7).setHeaderValue("<html><body>Процентная<br>скидка %</body></html>");
        productsTable.getColumnModel().getColumn(7).setCellRenderer(
                new ANumbericCellRenderer(new javax.swing.ImageIcon(getClass().getResource("/tradeterminal/icons/TT_icons/16X16/prskidka.png")), "", "%"));

        productsTable.getColumnModel().getColumn(8).setHeaderValue("<html><body>Итоговая цена<br> за 1 меру</body></html>");
        productsTable.getColumnModel().getColumn(9).setHeaderValue("<html><body>Итоговая цена<br>за все</body></html>");


        productsTable.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent e) {
                        if (!e.getValueIsAdjusting()) {
                            //tabloFormattedTextField.setValue(model.getSummForAllProducts());

                            int tableSelectedRow = productsTable.getSelectedRow();

                            if (tableSelectedRow != -1) { // Если элемент всеже выбран
                                // Получаем реальный индекс в модели
                                int modelSelectedRow = productsTable.convertRowIndexToModel(tableSelectedRow);

                                //selectedRowId = ((Number) adapter.getValueAt(modelSelectedRow, 0)).intValue();
                                selectedScode = (String) adapter.getValueAt(modelSelectedRow, 3);
                            }
                        }
                    }
                });

        selectedScode = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        findTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        findNameTextField = new javax.swing.JTextField();

        setName("Form"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        productsTable.setName("productsTable"); // NOI18N
        jScrollPane1.setViewportView(productsTable);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(tradeterminal.TradeTerminalApp.class).getContext().getResourceMap(FindProdustsDialogPanel.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        findTextField.setText(resourceMap.getString("findTextField.text")); // NOI18N
        findTextField.setName("findTextField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(tradeterminal.TradeTerminalApp.class).getContext().getActionMap(FindProdustsDialogPanel.class, this);
        jButton1.setAction(actionMap.get("find")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        findNameTextField.setText(resourceMap.getString("findNameTextField.text")); // NOI18N
        findNameTextField.setName("findNameTextField"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 777, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2)
                    .addComponent(findNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField findNameTextField;
    private javax.swing.JTextField findTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productsTable;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean checkPanel() {

        if (selectedScode == null || selectedScode.length() == 0) {
            JOptionPane.showMessageDialog(
                    this,
                    "Товар не выбран из списка.",
                    "Информация",
                    JOptionPane.INFORMATION_MESSAGE);

            findTextField.requestFocus();
            return false;
        }

        return true;
    }

    @Override
    public void openPanel() {
    }

    @Action
    public void find() {


        String qs = " ";

        if (findTextField.getText().trim().length() > 0) {
            qs += " AND p.scod like '%" + findTextField.getText() + "%' ";
        }


        if (findNameTextField.getText().trim().length() > 0) {
            qs += " AND p.\"name\" like '%" + findNameTextField.getText() + "%' ";
        }



        String q = "SELECT p.id, p.\"name\", p.description, p.scod, "
                + "q.quantity as quantity, "
                + "p.measures_id, m.\"name\",p.list_price, p.spec_price, trunc(p.percent_discount * 100,2) as percent_discount, "
                + "trunc((case when (p.spec_price = 0 AND p.percent_discount=0) THEN p.list_price "
                + " when (p.spec_price > 0 AND p.percent_discount=0) THEN p.spec_price "
                + " when (p.spec_price = 0 AND p.percent_discount>0) THEN (p.list_price - (p.list_price)*p.percent_discount) "
                + " end),2) as spec_price_for_unit, "
                + " trunc((case when (p.spec_price = 0 AND p.percent_discount=0) THEN p.list_price "
                + " when (p.spec_price > 0 AND p.percent_discount=0) THEN p.spec_price "
                + " when (p.spec_price = 0 AND p.percent_discount>0) THEN (p.list_price - (p.list_price)*p.percent_discount) "
                + " end) * q.quantity,2) as total_price "
                + " FROM  products p, "
                + " rb_measures m, "
                + "v_products_quantity q "
                + "WHERE p.measures_id = m.id "
                + qs
                + " AND p.id = q.id "
                + " ORDER BY p.id; ";


        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        
        try {
            
            con =  Setup.getSource().getConnection();
            stmt = con.prepareStatement(q);

            rs = stmt.executeQuery();


            adapter = new DefaultTableModel();

            ResultSetMetaData mdata = rs.getMetaData();
            int colCount = mdata.getColumnCount();


            adapter.setColumnCount(colCount);


            while (rs.next()) {
                String[] rowData = new String[colCount];
                for (int i = 1; i <= colCount; i++) {
                    rowData[i - 1] = rs.getString(i);
                }
                adapter.addRow(rowData);
            }


            update();

            

        } catch (SQLException ex) {
            Logger.getLogger(FindProdustsDialogPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                rs.close();
                stmt.close();
                con.close();
                
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            
        }
    
    

    }

    public String getSelectedScode() {
        return selectedScode;
    }
}
